{"ast":null,"code":"import { NativeModules } from 'react-native';\nconst {\n  RNHeicConverter\n} = NativeModules;\n\nconst isNumber = n => !isNaN(parseFloat(n));\n\nconst isPHAssetsHEIC = path => path && path.toLowerCase().startsWith('ph://');\n\nconst isAssetsHEIC = path => {\n  const ph = path && path.toLowerCase();\n  return ph && ph.startsWith('assets-library://asset/') && ph.endsWith('heic');\n};\n\nconst alAssetUris = uri => {\n  const [, localIdentifier] = uri.match('ph://([^/]+)');\n\n  if (!localIdentifier) {\n    console.error(`Unable to find localIdentifier from asset \"${uri}\"`);\n    return uri;\n  }\n\n  return `assets-library://asset/asset.HEIC?id=${localIdentifier}&ext=HEIC`;\n};\n\nclass HEICConverter {\n  static convert(params) {\n    const {\n      extension,\n      quality,\n      path\n    } = params;\n    const options = {\n      path: path.startsWith('file://') ? path.replace('file://', '') : path,\n      extension: params.extension,\n      isAssetsHEIC: isAssetsHEIC(path) || isPHAssetsHEIC(path)\n    };\n\n    if (isPHAssetsHEIC(path)) {\n      options.path = alAssetUris(path);\n    }\n\n    switch (extension) {\n      case 'png':\n        options.extensionType = 1;\n        break;\n\n      case 'base64':\n        options.extensionType = 2;\n        break;\n\n      default:\n        options.extensionType = 0;\n        options.extension = 'jpg';\n    }\n\n    if (quality && isNumber(quality) && quality <= 1) {\n      options.quality = quality;\n    } else {\n      options.quality = 1;\n    }\n\n    return RNHeicConverter.convert(options).then(result => result);\n  }\n\n}\n\nexport default HEICConverter;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/blockchain_project/node_modules/react-native-heic-converter/index.js"],"names":["NativeModules","RNHeicConverter","isNumber","n","isNaN","parseFloat","isPHAssetsHEIC","path","toLowerCase","startsWith","isAssetsHEIC","ph","endsWith","alAssetUris","uri","localIdentifier","match","console","error","HEICConverter","convert","params","extension","quality","options","replace","extensionType","then","result"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAsBD,aAA5B;;AAEA,MAAME,QAAQ,GAAGC,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAA5B;;AAEA,MAAMG,cAAc,GAAGC,IAAI,IACvBA,IAAI,IAAIA,IAAI,CAACC,WAAL,GAAmBC,UAAnB,CAA8B,OAA9B,CADZ;;AAGA,MAAMC,YAAY,GAAGH,IAAI,IAAI;AAC3B,QAAMI,EAAE,GAAGJ,IAAI,IAAIA,IAAI,CAACC,WAAL,EAAnB;AACA,SAAOG,EAAE,IAAIA,EAAE,CAACF,UAAH,CAAc,yBAAd,CAAN,IAAkDE,EAAE,CAACC,QAAH,CAAY,MAAZ,CAAzD;AACD,CAHD;;AAKA,MAAMC,WAAW,GAAGC,GAAG,IAAI;AACzB,QAAM,GAAGC,eAAH,IAAsBD,GAAG,CAACE,KAAJ,CAAU,cAAV,CAA5B;;AACA,MAAI,CAACD,eAAL,EAAsB;AACpBE,IAAAA,OAAO,CAACC,KAAR,CAAe,8CAA6CJ,GAAI,GAAhE;AACA,WAAOA,GAAP;AACD;;AACD,SAAQ,wCAAuCC,eAAgB,WAA/D;AACD,CAPD;;AASA,MAAMI,aAAN,CAAoB;AACJ,SAAPC,OAAO,CAACC,MAAD,EAAS;AACrB,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,OAAb;AAAsBhB,MAAAA;AAAtB,QAA+Bc,MAArC;AACA,UAAMG,OAAO,GAAG;AACdjB,MAAAA,IAAI,EAAEA,IAAI,CAACE,UAAL,CAAgB,SAAhB,IAA6BF,IAAI,CAACkB,OAAL,CAAa,SAAb,EAAwB,EAAxB,CAA7B,GAA2DlB,IADnD;AAEde,MAAAA,SAAS,EAAED,MAAM,CAACC,SAFJ;AAGdZ,MAAAA,YAAY,EAAEA,YAAY,CAACH,IAAD,CAAZ,IAAsBD,cAAc,CAACC,IAAD;AAHpC,KAAhB;;AAMA,QAAID,cAAc,CAACC,IAAD,CAAlB,EAA0B;AACxBiB,MAAAA,OAAO,CAACjB,IAAR,GAAeM,WAAW,CAACN,IAAD,CAA1B;AACD;;AAED,YAAQe,SAAR;AACE,WAAK,KAAL;AACEE,QAAAA,OAAO,CAACE,aAAR,GAAwB,CAAxB;AACA;;AACF,WAAK,QAAL;AACEF,QAAAA,OAAO,CAACE,aAAR,GAAwB,CAAxB;AACA;;AACF;AACEF,QAAAA,OAAO,CAACE,aAAR,GAAwB,CAAxB;AACAF,QAAAA,OAAO,CAACF,SAAR,GAAoB,KAApB;AATJ;;AAYA,QAAIC,OAAO,IAAIrB,QAAQ,CAACqB,OAAD,CAAnB,IAAgCA,OAAO,IAAI,CAA/C,EAAkD;AAChDC,MAAAA,OAAO,CAACD,OAAR,GAAkBA,OAAlB;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,CAACD,OAAR,GAAkB,CAAlB;AACD;;AAED,WAAOtB,eAAe,CACnBmB,OADI,CACII,OADJ,EAEJG,IAFI,CAECC,MAAM,IAAKA,MAFZ,CAAP;AAGD;;AAlCiB;;AAqCpB,eAAeT,aAAf","sourcesContent":["import { NativeModules } from 'react-native';\n\nconst { RNHeicConverter } = NativeModules;\n\nconst isNumber = n => !isNaN(parseFloat(n));\n\nconst isPHAssetsHEIC = path =>\n    path && path.toLowerCase().startsWith('ph://');\n\nconst isAssetsHEIC = path => {\n  const ph = path && path.toLowerCase();\n  return ph && ph.startsWith('assets-library://asset/') && ph.endsWith('heic')\n}\n\nconst alAssetUris = uri => {\n  const [, localIdentifier] = uri.match('ph://([^/]+)');\n  if (!localIdentifier) {\n    console.error(`Unable to find localIdentifier from asset \"${uri}\"`);\n    return uri;\n  }\n  return `assets-library://asset/asset.HEIC?id=${localIdentifier}&ext=HEIC`;\n};\n\nclass HEICConverter {\n  static convert(params) {\n    const { extension, quality, path } = params;\n    const options = {\n      path: path.startsWith('file://') ? path.replace('file://', '') : path,\n      extension: params.extension,\n      isAssetsHEIC: isAssetsHEIC(path) || isPHAssetsHEIC(path),\n    };\n\n    if (isPHAssetsHEIC(path)) {\n      options.path = alAssetUris(path);\n    }\n\n    switch (extension) {\n      case 'png':\n        options.extensionType = 1;\n        break;\n      case 'base64':\n        options.extensionType = 2;\n        break;\n      default:\n        options.extensionType = 0;\n        options.extension = 'jpg';\n    }\n\n    if (quality && isNumber(quality) && quality <= 1) {\n      options.quality = quality;\n    } else {\n      options.quality = 1;\n    }\n\n    return RNHeicConverter\n      .convert(options)\n      .then(result => (result));\n  }\n}\n\nexport default HEICConverter;\n"]},"metadata":{},"sourceType":"module"}