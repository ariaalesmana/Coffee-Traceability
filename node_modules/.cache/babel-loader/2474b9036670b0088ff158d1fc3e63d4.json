{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Coffee-Traceability/src/components/Grosir/Supplier/Google Maps/MyGoogleMap.js\";\n// MyGoogleMaps.js\nimport React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport styled from \"styled-components\";\nimport Marker from \"./Marker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n_c = Wrapper;\n\nclass MyGoogleMap extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      mapApiLoaded: false,\n      mapInstance: null,\n      mapApi: null,\n      geoCoder: null,\n      places: [],\n      center: [],\n      zoom: 9,\n      address: \"\",\n      draggable: true,\n      lat: null,\n      lng: null\n    };\n\n    this.onMarkerInteraction = (childKey, childProps, mouse) => {\n      this.setState({\n        draggable: false,\n        lat: mouse.lat,\n        lng: mouse.lng\n      });\n      this.props.onMarkerHandle(mouse.lat, mouse.lng);\n    };\n\n    this.onMarkerInteractionMouseUp = (childKey, childProps, mouse) => {\n      this.setState({\n        draggable: true\n      });\n\n      this._generateAddress();\n    };\n\n    this._onChange = _ref => {\n      let {\n        center,\n        zoom\n      } = _ref;\n      this.setState({\n        center: center,\n        zoom: zoom\n      });\n    };\n\n    this._onClick = value => {\n      this.setState({\n        lat: value.lat,\n        lng: value.lng\n      });\n      this.props.onMarkerHandle(value.lat, value.lng);\n    };\n\n    this.apiHasLoaded = (map, maps) => {\n      this.setState({\n        mapApiLoaded: true,\n        mapInstance: map,\n        mapApi: maps\n      });\n\n      this._generateAddress();\n    };\n\n    this.addPlace = place => {\n      this.setState({\n        places: [place],\n        lat: place.geometry.location.lat(),\n        lng: place.geometry.location.lng()\n      });\n\n      this._generateAddress();\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.longProps !== prevProps.longProps) {\n      var lat = parseFloat(this.props.latProps);\n      var long = parseFloat(this.props.longProps);\n      this.setState({\n        center: [lat, long],\n        lat: lat,\n        lng: long\n      });\n    }\n  }\n\n  componentWillMount() {\n    this.setCurrentLocation();\n  }\n\n  _generateAddress() {\n    const {\n      mapApi\n    } = this.state; // const geocoder = new mapApi.Geocoder();\n    // geocoder.geocode(\n    //   { location: { lat: this.state.lat, lng: this.state.lng } },\n    //   (results, status) => {\n    //     console.log(results);\n    //     console.log(status);\n    //     if (status === \"OK\") {\n    //       if (results[0]) {\n    //         this.zoom = 12;\n    //         this.setState({ address: results[0].formatted_address });\n    //       } else {\n    //         window.alert(\"No results found\");\n    //       }\n    //     } else {\n    //       window.alert(\"Geocoder failed due to: \" + status);\n    //     }\n    //   }\n    // );\n  } // Get Current Location Coordinates\n\n\n  setCurrentLocation() {\n    if (this.props.longProps == null && this.props.latProps == null) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          center: [position.coords.latitude, position.coords.longitude],\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      places,\n      mapApiLoaded,\n      mapInstance,\n      mapApi\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n        center: this.state.center,\n        zoom: this.state.zoom,\n        draggable: this.state.draggable,\n        onChange: this._onChange,\n        onChildMouseDown: this.onMarkerInteraction,\n        onChildMouseUp: this.onMarkerInteractionMouseUp,\n        onChildMouseMove: this.onMarkerInteraction,\n        onChildClick: () => console.log(\"child click\"),\n        onClick: this._onClick,\n        bootstrapURLKeys: {\n          key: \"AIzaSyCwO-uMs8PcFmBON8gqQAVK8EdX1NRUnOU\",\n          libraries: [\"places\", \"geometry\"]\n        },\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: _ref2 => {\n          let {\n            map,\n            maps\n          } = _ref2;\n          return this.apiHasLoaded(map, maps);\n        },\n        children: /*#__PURE__*/_jsxDEV(Marker, {\n          text: this.state.address,\n          lat: this.state.lat,\n          lng: this.state.lng\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MyGoogleMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrapper\");","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Coffee-Traceability/src/components/Grosir/Supplier/Google Maps/MyGoogleMap.js"],"names":["React","Component","GoogleMapReact","styled","Marker","Wrapper","main","MyGoogleMap","state","mapApiLoaded","mapInstance","mapApi","geoCoder","places","center","zoom","address","draggable","lat","lng","onMarkerInteraction","childKey","childProps","mouse","setState","props","onMarkerHandle","onMarkerInteractionMouseUp","_generateAddress","_onChange","_onClick","value","apiHasLoaded","map","maps","addPlace","place","geometry","location","componentDidUpdate","prevProps","longProps","parseFloat","latProps","long","componentWillMount","setCurrentLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render","console","log","key","libraries"],"mappings":"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","sourcesContent":["// MyGoogleMaps.js\nimport React, { Component } from \"react\";\n\nimport GoogleMapReact from \"google-map-react\";\n\nimport styled from \"styled-components\";\n\nimport Marker from \"./Marker\";\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nclass MyGoogleMap extends Component {\n  state = {\n    mapApiLoaded: false,\n    mapInstance: null,\n    mapApi: null,\n    geoCoder: null,\n    places: [],\n    center: [],\n    zoom: 9,\n    address: \"\",\n    draggable: true,\n    lat: null,\n    lng: null,\n  };\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.longProps !== prevProps.longProps) {\n      var lat = parseFloat(this.props.latProps);\n      var long = parseFloat(this.props.longProps);\n      this.setState({\n        center: [lat, long],\n        lat: lat,\n        lng: long,\n      });\n    }\n  }\n  componentWillMount() {\n    this.setCurrentLocation();\n  }\n\n  onMarkerInteraction = (childKey, childProps, mouse) => {\n    this.setState({\n      draggable: false,\n      lat: mouse.lat,\n      lng: mouse.lng,\n    });\n    this.props.onMarkerHandle(mouse.lat, mouse.lng);\n  };\n\n  onMarkerInteractionMouseUp = (childKey, childProps, mouse) => {\n    this.setState({ draggable: true });\n    this._generateAddress();\n  };\n\n  _onChange = ({ center, zoom }) => {\n    this.setState({\n      center: center,\n      zoom: zoom,\n    });\n  };\n\n  _onClick = (value) => {\n    this.setState({\n      lat: value.lat,\n      lng: value.lng,\n    });\n    this.props.onMarkerHandle(value.lat, value.lng);\n  };\n\n  apiHasLoaded = (map, maps) => {\n    this.setState({\n      mapApiLoaded: true,\n      mapInstance: map,\n      mapApi: maps,\n    });\n\n    this._generateAddress();\n  };\n\n  addPlace = (place) => {\n    this.setState({\n      places: [place],\n      lat: place.geometry.location.lat(),\n      lng: place.geometry.location.lng(),\n    });\n    this._generateAddress();\n  };\n\n  _generateAddress() {\n    const { mapApi } = this.state;\n\n    // const geocoder = new mapApi.Geocoder();\n\n    // geocoder.geocode(\n    //   { location: { lat: this.state.lat, lng: this.state.lng } },\n    //   (results, status) => {\n    //     console.log(results);\n    //     console.log(status);\n    //     if (status === \"OK\") {\n    //       if (results[0]) {\n    //         this.zoom = 12;\n    //         this.setState({ address: results[0].formatted_address });\n    //       } else {\n    //         window.alert(\"No results found\");\n    //       }\n    //     } else {\n    //       window.alert(\"Geocoder failed due to: \" + status);\n    //     }\n    //   }\n    // );\n  }\n\n  // Get Current Location Coordinates\n\n  setCurrentLocation() {\n    if (this.props.longProps == null && this.props.latProps == null) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.setState({\n          center: [position.coords.latitude, position.coords.longitude],\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      });\n    }\n  }\n\n  render() {\n    const { places, mapApiLoaded, mapInstance, mapApi } = this.state;\n\n    return (\n      <Wrapper>\n        <GoogleMapReact\n          center={this.state.center}\n          zoom={this.state.zoom}\n          draggable={this.state.draggable}\n          onChange={this._onChange}\n          onChildMouseDown={this.onMarkerInteraction}\n          onChildMouseUp={this.onMarkerInteractionMouseUp}\n          onChildMouseMove={this.onMarkerInteraction}\n          onChildClick={() => console.log(\"child click\")}\n          onClick={this._onClick}\n          bootstrapURLKeys={{\n            key: \"AIzaSyCwO-uMs8PcFmBON8gqQAVK8EdX1NRUnOU\",\n            libraries: [\"places\", \"geometry\"],\n          }}\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)}\n        >\n          <Marker\n            text={this.state.address}\n            lat={this.state.lat}\n            lng={this.state.lng}\n          />\n        </GoogleMapReact>\n\n        {/* <div className=\"info-wrapper\">\n          <div className=\"map-details\">\n            Latitude: <span>{this.state.lat}</span>, Longitude:{\" \"}\n            <span>{this.state.lng}</span>\n          </div>\n          <div className=\"map-details\">\n            Zoom: <span>{this.state.zoom}</span>\n          </div>\n        </div> */}\n      </Wrapper>\n    );\n  }\n}\n\nexport default MyGoogleMap;\n"]},"metadata":{},"sourceType":"module"}