{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromQuorumWallet = exports.fromKryptoKit = exports.fromEtherCamp = exports.fromEtherWallet = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar scrypt_js_1 = require(\"scrypt-js\");\n\nvar index_1 = require(\"./index\");\n\nvar utf8 = require('utf8');\n\nvar aesjs = require('aes-js');\n\nfunction runCipherBuffer(cipher, data) {\n  return Buffer.concat([cipher.update(data), cipher.final()]);\n}\n\nvar evpKdfDefaults = {\n  count: 1,\n  keysize: 16,\n  ivsize: 16,\n  digest: 'md5'\n};\n\nfunction mergeEvpKdfOptsWithDefaults(opts) {\n  if (!opts) {\n    return evpKdfDefaults;\n  }\n\n  return {\n    count: opts.count || evpKdfDefaults.count,\n    keysize: opts.keysize || evpKdfDefaults.keysize,\n    ivsize: opts.ivsize || evpKdfDefaults.ivsize,\n    digest: opts.digest || evpKdfDefaults.digest\n  };\n}\n/*\n * opts:\n * - digest - digest algorithm, defaults to md5\n * - count - hash iterations\n * - keysize - desired key size\n * - ivsize - desired IV size\n *\n * Algorithm form https://www.openssl.org/docs/manmaster/crypto/EVP_BytesToKey.html\n *\n * FIXME: not optimised at all\n */\n\n\nfunction evp_kdf(data, salt, opts) {\n  var params = mergeEvpKdfOptsWithDefaults(opts); // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`\n\n  function iter(block) {\n    var hash = crypto.createHash(params.digest);\n    hash.update(block);\n    hash.update(data);\n    hash.update(salt);\n    block = hash.digest();\n\n    for (var i_1 = 1, len = params.count; i_1 < len; i_1++) {\n      hash = crypto.createHash(params.digest);\n      hash.update(block);\n      block = hash.digest();\n    }\n\n    return block;\n  }\n\n  var ret = [];\n  var i = 0;\n\n  while (Buffer.concat(ret).length < params.keysize + params.ivsize) {\n    ret[i] = iter(i === 0 ? Buffer.alloc(0) : ret[i - 1]);\n    i++;\n  }\n\n  var tmp = Buffer.concat(ret);\n  return {\n    key: tmp.slice(0, params.keysize),\n    iv: tmp.slice(params.keysize, params.keysize + params.ivsize)\n  };\n} // http://stackoverflow.com/questions/25288311/cryptojs-aes-pattern-always-ends-with\n\n\nfunction decodeCryptojsSalt(input) {\n  var ciphertext = Buffer.from(input, 'base64');\n\n  if (ciphertext.slice(0, 8).toString() === 'Salted__') {\n    return {\n      salt: ciphertext.slice(8, 16),\n      ciphertext: ciphertext.slice(16)\n    };\n  }\n\n  return {\n    ciphertext: ciphertext\n  };\n}\n/*\n * Third Party API: Import a wallet generated by EtherWallet\n * This wallet format is created by https://github.com/SilentCicero/ethereumjs-accounts\n * and used on https://www.myetherwallet.com/\n */\n\n\nfunction fromEtherWallet(input, password) {\n  var json = typeof input === 'object' ? input : JSON.parse(input);\n  var privateKey;\n\n  if (!json.locked) {\n    if (json.private.length !== 64) {\n      throw new Error('Invalid private key length');\n    }\n\n    privateKey = Buffer.from(json.private, 'hex');\n  } else {\n    if (typeof password !== 'string') {\n      throw new Error('Password required');\n    }\n\n    if (password.length < 7) {\n      throw new Error('Password must be at least 7 characters');\n    } // the \"encrypted\" version has the low 4 bytes\n    // of the hash of the address appended\n\n\n    var hash = json.encrypted ? json.private.slice(0, 128) : json.private; // decode openssl ciphertext + salt encoding\n\n    var cipher = decodeCryptojsSalt(hash);\n\n    if (!cipher.salt) {\n      throw new Error('Unsupported EtherWallet key format');\n    } // derive key/iv using OpenSSL EVP as implemented in CryptoJS\n\n\n    var evp = evp_kdf(Buffer.from(password), cipher.salt, {\n      keysize: 32,\n      ivsize: 16\n    });\n    var decipher = crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);\n    privateKey = runCipherBuffer(decipher, Buffer.from(cipher.ciphertext)); // NOTE: yes, they've run it through UTF8\n\n    privateKey = Buffer.from(utf8.decode(privateKey.toString()), 'hex');\n  }\n\n  var wallet = new index_1.default(privateKey);\n\n  if (wallet.getAddressString() !== json.address) {\n    throw new Error('Invalid private key or address');\n  }\n\n  return wallet;\n}\n\nexports.fromEtherWallet = fromEtherWallet;\n/**\n * Third Party API: Import a brain wallet used by Ether.Camp\n */\n\nfunction fromEtherCamp(passphrase) {\n  return new index_1.default(ethereumjs_util_1.keccak256(Buffer.from(passphrase)));\n}\n\nexports.fromEtherCamp = fromEtherCamp;\n/**\n * Third Party API: Import a wallet from a KryptoKit seed\n */\n\nfunction fromKryptoKit(entropy, password) {\n  return __awaiter(this, void 0, void 0, function () {\n    function kryptoKitBrokenScryptSeed(buf) {\n      // js-scrypt calls `Buffer.from(String(salt), 'utf8')` on the seed even though it is a buffer\n      //\n      // The `buffer`` implementation used does the below transformation (doesn't matches the current version):\n      // https://github.com/feross/buffer/blob/67c61181b938b17d10dbfc0a545f713b8bd59de8/index.js\n      function decodeUtf8Char(str) {\n        try {\n          return decodeURIComponent(str);\n        } catch (err) {\n          return String.fromCharCode(0xfffd); // UTF 8 invalid char\n        }\n      }\n\n      var res = '',\n          tmp = '';\n\n      for (var i = 0; i < buf.length; i++) {\n        if (buf[i] <= 0x7f) {\n          res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);\n          tmp = '';\n        } else {\n          tmp += '%' + buf[i].toString(16);\n        }\n      }\n\n      return Buffer.from(res + decodeUtf8Char(tmp));\n    }\n\n    var type, privateKey, encryptedSeed, checksum, salt, aesKey, decipher;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (entropy[0] === '#') {\n            entropy = entropy.slice(1);\n          }\n\n          type = entropy[0];\n          entropy = entropy.slice(1);\n          if (!(type === 'd')) return [3\n          /*break*/\n          , 1];\n          privateKey = ethereumjs_util_1.sha256(ethereumjs_util_1.toBuffer(entropy));\n          return [3\n          /*break*/\n          , 4];\n\n        case 1:\n          if (!(type === 'q')) return [3\n          /*break*/\n          , 3];\n\n          if (typeof password !== 'string') {\n            throw new Error('Password required');\n          }\n\n          encryptedSeed = ethereumjs_util_1.sha256(Buffer.from(entropy.slice(0, 30)));\n          checksum = entropy.slice(30, 46);\n          salt = kryptoKitBrokenScryptSeed(encryptedSeed);\n          return [4\n          /*yield*/\n          , scrypt_js_1.scrypt(Buffer.from(password, 'utf8'), salt, 16384, 8, 1, 32)\n          /* FIXME: try to use `crypto` instead of `aesjs`\n                               // NOTE: ECB doesn't use the IV, so it can be anything\n          var decipher = crypto.createDecipheriv(\"aes-256-ecb\", aesKey, Buffer.from(0))\n                               // FIXME: this is a clear abuse, but seems to match how ECB in aesjs works\n          privKey = Buffer.concat([\n            decipher.update(encryptedSeed).slice(0, 16),\n            decipher.update(encryptedSeed).slice(0, 16),\n          ])\n          */\n          ];\n\n        case 2:\n          aesKey = _a.sent();\n          decipher = new aesjs.ModeOfOperation.ecb(aesKey);\n          /* decrypt returns an Uint8Array, perhaps there is a better way to concatenate */\n\n          privateKey = Buffer.concat([Buffer.from(decipher.decrypt(encryptedSeed.slice(0, 16))), Buffer.from(decipher.decrypt(encryptedSeed.slice(16, 32)))]);\n\n          if (checksum.length > 0) {\n            if (checksum !== ethereumjs_util_1.sha256(ethereumjs_util_1.sha256(privateKey)).slice(0, 8).toString('hex')) {\n              throw new Error('Failed to decrypt input - possibly invalid passphrase');\n            }\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          throw new Error('Unsupported or invalid entropy type');\n\n        case 4:\n          return [2\n          /*return*/\n          , new index_1.default(privateKey)];\n      }\n    });\n  });\n}\n\nexports.fromKryptoKit = fromKryptoKit;\n/**\n * Third Party API: Import a brain wallet used by Quorum Wallet\n */\n\nfunction fromQuorumWallet(passphrase, userid) {\n  if (passphrase.length < 10) {\n    throw new Error('Passphrase must be at least 10 characters');\n  }\n\n  if (userid.length < 10) {\n    throw new Error('User id must be at least 10 characters');\n  }\n\n  var merged = passphrase + userid;\n  var seed = crypto.pbkdf2Sync(merged, merged, 2000, 32, 'sha256');\n  return new index_1.default(seed);\n}\n\nexports.fromQuorumWallet = fromQuorumWallet;\nvar Thirdparty = {\n  fromEtherWallet: fromEtherWallet,\n  fromEtherCamp: fromEtherCamp,\n  fromKryptoKit: fromKryptoKit,\n  fromQuorumWallet: fromQuorumWallet\n};\nexports.default = Thirdparty;","map":{"version":3,"sources":["../src/thirdparty.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AACA,IAAM,KAAK,GAAG,OAAO,CAAC,QAAD,CAArB;;AAEA,SAAS,eAAT,CAAyB,MAAzB,EAAkE,IAAlE,EAA8E;AAC5E,SAAO,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,MAAP,CAAc,IAAd,CAAD,EAAsB,MAAM,CAAC,KAAP,EAAtB,CAAd,CAAP;AACD;;AAWD,IAAM,cAAc,GAAe;AACjC,EAAA,KAAK,EAAE,CAD0B;AAEjC,EAAA,OAAO,EAAE,EAFwB;AAGjC,EAAA,MAAM,EAAE,EAHyB;AAIjC,EAAA,MAAM,EAAE;AAJyB,CAAnC;;AAOA,SAAS,2BAAT,CAAqC,IAArC,EAA+D;AAC7D,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,cAAP;AACD;;AACD,SAAO;AACL,IAAA,KAAK,EAAE,IAAI,CAAC,KAAL,IAAc,cAAc,CAAC,KAD/B;AAEL,IAAA,OAAO,EAAE,IAAI,CAAC,OAAL,IAAgB,cAAc,CAAC,OAFnC;AAGL,IAAA,MAAM,EAAE,IAAI,CAAC,MAAL,IAAe,cAAc,CAAC,MAHjC;AAIL,IAAA,MAAM,EAAE,IAAI,CAAC,MAAL,IAAe,cAAc,CAAC;AAJjC,GAAP;AAMD;AAED;;;;;;;;;;AAUG;;;AACH,SAAS,OAAT,CAAiB,IAAjB,EAA+B,IAA/B,EAA6C,IAA7C,EAAuE;AACrE,MAAM,MAAM,GAAG,2BAA2B,CAAC,IAAD,CAA1C,CADqE,CAGrE;;AACA,WAAS,IAAT,CAAc,KAAd,EAA2B;AACzB,QAAI,IAAI,GAAG,MAAM,CAAC,UAAP,CAAkB,MAAM,CAAC,MAAzB,CAAX;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,KAAZ;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,IAAZ;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,IAAZ;AACA,IAAA,KAAK,GAAG,IAAI,CAAC,MAAL,EAAR;;AAEA,SAAK,IAAI,GAAC,GAAG,CAAR,EAAW,GAAG,GAAG,MAAM,CAAC,KAA7B,EAAoC,GAAC,GAAG,GAAxC,EAA6C,GAAC,EAA9C,EAAkD;AAChD,MAAA,IAAI,GAAG,MAAM,CAAC,UAAP,CAAkB,MAAM,CAAC,MAAzB,CAAP;AACA,MAAA,IAAI,CAAC,MAAL,CAAY,KAAZ;AACA,MAAA,KAAK,GAAG,IAAI,CAAC,MAAL,EAAR;AACD;;AACD,WAAO,KAAP;AACD;;AAED,MAAM,GAAG,GAAa,EAAtB;AACA,MAAI,CAAC,GAAG,CAAR;;AACA,SAAO,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,MAAnB,GAA4B,MAAM,CAAC,OAAP,GAAiB,MAAM,CAAC,MAA3D,EAAmE;AACjE,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,IAAI,CAAC,CAAC,KAAK,CAAN,GAAU,MAAM,CAAC,KAAP,CAAa,CAAb,CAAV,GAA4B,GAAG,CAAC,CAAC,GAAG,CAAL,CAAhC,CAAb;AACA,IAAA,CAAC;AACF;;AACD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,GAAd,CAAZ;AAEA,SAAO;AACL,IAAA,GAAG,EAAE,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,MAAM,CAAC,OAApB,CADA;AAEL,IAAA,EAAE,EAAE,GAAG,CAAC,KAAJ,CAAU,MAAM,CAAC,OAAjB,EAA0B,MAAM,CAAC,OAAP,GAAiB,MAAM,CAAC,MAAlD;AAFC,GAAP;AAID,C,CAED;;;AACA,SAAS,kBAAT,CAA4B,KAA5B,EAAyC;AACvC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,QAAnB,CAAnB;;AACA,MAAI,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,QAAvB,OAAsC,UAA1C,EAAsD;AACpD,WAAO;AACL,MAAA,IAAI,EAAE,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CADD;AAEL,MAAA,UAAU,EAAE,UAAU,CAAC,KAAX,CAAiB,EAAjB;AAFP,KAAP;AAID;;AACD,SAAO;AAAE,IAAA,UAAU,EAAA;AAAZ,GAAP;AACD;AAoBD;;;;AAIG;;;AACH,SAAgB,eAAhB,CAAgC,KAAhC,EAAoE,QAApE,EAAoF;AAClF,MAAM,IAAI,GAAuB,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAA5B,GAAoC,IAAI,CAAC,KAAL,CAAW,KAAX,CAArE;AAEA,MAAI,UAAJ;;AACA,MAAI,CAAC,IAAI,CAAC,MAAV,EAAkB;AAChB,QAAI,IAAI,CAAC,OAAL,CAAa,MAAb,KAAwB,EAA5B,EAAgC;AAC9B,YAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,IAAA,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,OAAjB,EAA0B,KAA1B,CAAb;AACD,GALD,MAKO;AACL,QAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,YAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,QAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD,KAPI,CASL;AACA;;;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,OAAL,CAAa,KAAb,CAAmB,CAAnB,EAAsB,GAAtB,CAAjB,GAA8C,IAAI,CAAC,OAAhE,CAXK,CAaL;;AACA,QAAM,MAAM,GAAG,kBAAkB,CAAC,IAAD,CAAjC;;AACA,QAAI,CAAC,MAAM,CAAC,IAAZ,EAAkB;AAChB,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACD,KAjBI,CAmBL;;;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAD,EAAwB,MAAM,CAAC,IAA/B,EAAqC;AAAE,MAAA,OAAO,EAAE,EAAX;AAAe,MAAA,MAAM,EAAE;AAAvB,KAArC,CAAnB;AAEA,QAAM,QAAQ,GAAG,MAAM,CAAC,gBAAP,CAAwB,aAAxB,EAAuC,GAAG,CAAC,GAA3C,EAAgD,GAAG,CAAC,EAApD,CAAjB;AACA,IAAA,UAAU,GAAG,eAAe,CAAC,QAAD,EAAW,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,UAAnB,CAAX,CAA5B,CAvBK,CAyBL;;AACA,IAAA,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,MAAL,CAAY,UAAU,CAAC,QAAX,EAAZ,CAAZ,EAAgD,KAAhD,CAAb;AACD;;AAED,MAAM,MAAM,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAW,UAAX,CAAf;;AACA,MAAI,MAAM,CAAC,gBAAP,OAA8B,IAAI,CAAC,OAAvC,EAAgD;AAC9C,UAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,SAAO,MAAP;AACD;;AA3CD,OAAA,CAAA,eAAA,GAAA,eAAA;AA6CA;;AAEG;;AACH,SAAgB,aAAhB,CAA8B,UAA9B,EAAgD;AAC9C,SAAO,IAAI,OAAA,CAAA,OAAJ,CAAW,iBAAA,CAAA,SAAA,CAAU,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAV,CAAX,CAAP;AACD;;AAFD,OAAA,CAAA,aAAA,GAAA,aAAA;AAIA;;AAEG;;AACH,SAAsB,aAAtB,CAAoC,OAApC,EAAqD,QAArD,EAAqE;;AACnE,aAAS,yBAAT,CAAmC,GAAnC,EAA8C;AAC5C;AACA;AACA;AACA;AAEA,eAAS,cAAT,CAAwB,GAAxB,EAAmC;AACjC,YAAI;AACF,iBAAO,kBAAkB,CAAC,GAAD,CAAzB;AACD,SAFD,CAEE,OAAO,GAAP,EAAY;AACZ,iBAAO,MAAM,CAAC,YAAP,CAAoB,MAApB,CAAP,CADY,CACuB;AACpC;AACF;;AAED,UAAI,GAAG,GAAG,EAAV;AAAA,UACE,GAAG,GAAG,EADR;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,YAAI,GAAG,CAAC,CAAD,CAAH,IAAU,IAAd,EAAoB;AAClB,UAAA,GAAG,IAAI,cAAc,CAAC,GAAD,CAAd,GAAsB,MAAM,CAAC,YAAP,CAAoB,GAAG,CAAC,CAAD,CAAvB,CAA7B;AACA,UAAA,GAAG,GAAG,EAAN;AACD,SAHD,MAGO;AACL,UAAA,GAAG,IAAI,MAAM,GAAG,CAAC,CAAD,CAAH,CAAO,QAAP,CAAgB,EAAhB,CAAb;AACD;AACF;;AACD,aAAO,MAAM,CAAC,IAAP,CAAY,GAAG,GAAG,cAAc,CAAC,GAAD,CAAhC,CAAP;AACD;;;;;;AAED,cAAI,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AACtB,YAAA,OAAO,GAAG,OAAO,CAAC,KAAR,CAAc,CAAd,CAAV;AACD;;AAEK,UAAA,IAAI,GAAG,OAAO,CAAC,CAAD,CAAd;AACN,UAAA,OAAO,GAAG,OAAO,CAAC,KAAR,CAAc,CAAd,CAAV;cAGI,EAAA,IAAI,KAAK,GAAT,C,EAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACF,UAAA,UAAU,GAAG,iBAAA,CAAA,MAAA,CAAO,iBAAA,CAAA,QAAA,CAAS,OAAT,CAAP,CAAb;;;;;;cACS,EAAA,IAAI,KAAK,GAAT,C,EAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;;AACT,cAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,kBAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAEK,UAAA,aAAa,GAAG,iBAAA,CAAA,MAAA,CAAO,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAZ,CAAP,CAAhB;AACA,UAAA,QAAQ,GAAG,OAAO,CAAC,KAAR,CAAc,EAAd,EAAkB,EAAlB,CAAX;AAEA,UAAA,IAAI,GAAG,yBAAyB,CAAC,aAAD,CAAhC;AACS,iBAAA,CAAA;AAAA;AAAA,YAAM,WAAA,CAAA,MAAA,CAAO,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,MAAtB,CAAP,EAAsC,IAAtC,EAA4C,KAA5C,EAAmD,CAAnD,EAAsD,CAAtD,EAAyD,EAAzD;AAErB;;;;;;;;;AAFe,WAAA;;;AAAT,UAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AAcA,UAAA,QAAQ,GAAG,IAAI,KAAK,CAAC,eAAN,CAAsB,GAA1B,CAA8B,MAA9B,CAAX;AACN;;AACA,UAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,CACzB,MAAM,CAAC,IAAP,CAAY,QAAQ,CAAC,OAAT,CAAiB,aAAa,CAAC,KAAd,CAAoB,CAApB,EAAuB,EAAvB,CAAjB,CAAZ,CADyB,EAEzB,MAAM,CAAC,IAAP,CAAY,QAAQ,CAAC,OAAT,CAAiB,aAAa,CAAC,KAAd,CAAoB,EAApB,EAAwB,EAAxB,CAAjB,CAAZ,CAFyB,CAAd,CAAb;;AAKA,cAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,gBACE,QAAQ,KACR,iBAAA,CAAA,MAAA,CAAO,iBAAA,CAAA,MAAA,CAAO,UAAP,CAAP,EACG,KADH,CACS,CADT,EACY,CADZ,EAEG,QAFH,CAEY,KAFZ,CAFF,EAKE;AACA,oBAAM,IAAI,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF;;;;;;;AAED,gBAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;;;AAGF,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,OAAA,CAAA,OAAJ,CAAW,UAAX,CAAP,CAAA;;;;AACD;;AAnFD,OAAA,CAAA,aAAA,GAAA,aAAA;AAqFA;;AAEG;;AACH,SAAgB,gBAAhB,CAAiC,UAAjC,EAAqD,MAArD,EAAmE;AACjE,MAAI,UAAU,CAAC,MAAX,GAAoB,EAAxB,EAA4B;AAC1B,UAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,MAAI,MAAM,CAAC,MAAP,GAAgB,EAApB,EAAwB;AACtB,UAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAM,MAAM,GAAG,UAAU,GAAG,MAA5B;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,UAAP,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC,IAAlC,EAAwC,EAAxC,EAA4C,QAA5C,CAAb;AACA,SAAO,IAAI,OAAA,CAAA,OAAJ,CAAW,IAAX,CAAP;AACD;;AAXD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAaA,IAAM,UAAU,GAAG;AACjB,EAAA,eAAe,EAAA,eADE;AAEjB,EAAA,aAAa,EAAA,aAFI;AAGjB,EAAA,aAAa,EAAA,aAHI;AAIjB,EAAA,gBAAgB,EAAA;AAJC,CAAnB;AAOA,OAAA,CAAA,OAAA,GAAe,UAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromQuorumWallet = exports.fromKryptoKit = exports.fromEtherCamp = exports.fromEtherWallet = void 0;\nvar crypto = require(\"crypto\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar scrypt_js_1 = require(\"scrypt-js\");\nvar index_1 = require(\"./index\");\nvar utf8 = require('utf8');\nvar aesjs = require('aes-js');\nfunction runCipherBuffer(cipher, data) {\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n}\nvar evpKdfDefaults = {\n    count: 1,\n    keysize: 16,\n    ivsize: 16,\n    digest: 'md5',\n};\nfunction mergeEvpKdfOptsWithDefaults(opts) {\n    if (!opts) {\n        return evpKdfDefaults;\n    }\n    return {\n        count: opts.count || evpKdfDefaults.count,\n        keysize: opts.keysize || evpKdfDefaults.keysize,\n        ivsize: opts.ivsize || evpKdfDefaults.ivsize,\n        digest: opts.digest || evpKdfDefaults.digest,\n    };\n}\n/*\n * opts:\n * - digest - digest algorithm, defaults to md5\n * - count - hash iterations\n * - keysize - desired key size\n * - ivsize - desired IV size\n *\n * Algorithm form https://www.openssl.org/docs/manmaster/crypto/EVP_BytesToKey.html\n *\n * FIXME: not optimised at all\n */\nfunction evp_kdf(data, salt, opts) {\n    var params = mergeEvpKdfOptsWithDefaults(opts);\n    // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`\n    function iter(block) {\n        var hash = crypto.createHash(params.digest);\n        hash.update(block);\n        hash.update(data);\n        hash.update(salt);\n        block = hash.digest();\n        for (var i_1 = 1, len = params.count; i_1 < len; i_1++) {\n            hash = crypto.createHash(params.digest);\n            hash.update(block);\n            block = hash.digest();\n        }\n        return block;\n    }\n    var ret = [];\n    var i = 0;\n    while (Buffer.concat(ret).length < params.keysize + params.ivsize) {\n        ret[i] = iter(i === 0 ? Buffer.alloc(0) : ret[i - 1]);\n        i++;\n    }\n    var tmp = Buffer.concat(ret);\n    return {\n        key: tmp.slice(0, params.keysize),\n        iv: tmp.slice(params.keysize, params.keysize + params.ivsize),\n    };\n}\n// http://stackoverflow.com/questions/25288311/cryptojs-aes-pattern-always-ends-with\nfunction decodeCryptojsSalt(input) {\n    var ciphertext = Buffer.from(input, 'base64');\n    if (ciphertext.slice(0, 8).toString() === 'Salted__') {\n        return {\n            salt: ciphertext.slice(8, 16),\n            ciphertext: ciphertext.slice(16),\n        };\n    }\n    return { ciphertext: ciphertext };\n}\n/*\n * Third Party API: Import a wallet generated by EtherWallet\n * This wallet format is created by https://github.com/SilentCicero/ethereumjs-accounts\n * and used on https://www.myetherwallet.com/\n */\nfunction fromEtherWallet(input, password) {\n    var json = typeof input === 'object' ? input : JSON.parse(input);\n    var privateKey;\n    if (!json.locked) {\n        if (json.private.length !== 64) {\n            throw new Error('Invalid private key length');\n        }\n        privateKey = Buffer.from(json.private, 'hex');\n    }\n    else {\n        if (typeof password !== 'string') {\n            throw new Error('Password required');\n        }\n        if (password.length < 7) {\n            throw new Error('Password must be at least 7 characters');\n        }\n        // the \"encrypted\" version has the low 4 bytes\n        // of the hash of the address appended\n        var hash = json.encrypted ? json.private.slice(0, 128) : json.private;\n        // decode openssl ciphertext + salt encoding\n        var cipher = decodeCryptojsSalt(hash);\n        if (!cipher.salt) {\n            throw new Error('Unsupported EtherWallet key format');\n        }\n        // derive key/iv using OpenSSL EVP as implemented in CryptoJS\n        var evp = evp_kdf(Buffer.from(password), cipher.salt, { keysize: 32, ivsize: 16 });\n        var decipher = crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);\n        privateKey = runCipherBuffer(decipher, Buffer.from(cipher.ciphertext));\n        // NOTE: yes, they've run it through UTF8\n        privateKey = Buffer.from(utf8.decode(privateKey.toString()), 'hex');\n    }\n    var wallet = new index_1.default(privateKey);\n    if (wallet.getAddressString() !== json.address) {\n        throw new Error('Invalid private key or address');\n    }\n    return wallet;\n}\nexports.fromEtherWallet = fromEtherWallet;\n/**\n * Third Party API: Import a brain wallet used by Ether.Camp\n */\nfunction fromEtherCamp(passphrase) {\n    return new index_1.default(ethereumjs_util_1.keccak256(Buffer.from(passphrase)));\n}\nexports.fromEtherCamp = fromEtherCamp;\n/**\n * Third Party API: Import a wallet from a KryptoKit seed\n */\nfunction fromKryptoKit(entropy, password) {\n    return __awaiter(this, void 0, void 0, function () {\n        function kryptoKitBrokenScryptSeed(buf) {\n            // js-scrypt calls `Buffer.from(String(salt), 'utf8')` on the seed even though it is a buffer\n            //\n            // The `buffer`` implementation used does the below transformation (doesn't matches the current version):\n            // https://github.com/feross/buffer/blob/67c61181b938b17d10dbfc0a545f713b8bd59de8/index.js\n            function decodeUtf8Char(str) {\n                try {\n                    return decodeURIComponent(str);\n                }\n                catch (err) {\n                    return String.fromCharCode(0xfffd); // UTF 8 invalid char\n                }\n            }\n            var res = '', tmp = '';\n            for (var i = 0; i < buf.length; i++) {\n                if (buf[i] <= 0x7f) {\n                    res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);\n                    tmp = '';\n                }\n                else {\n                    tmp += '%' + buf[i].toString(16);\n                }\n            }\n            return Buffer.from(res + decodeUtf8Char(tmp));\n        }\n        var type, privateKey, encryptedSeed, checksum, salt, aesKey, decipher;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (entropy[0] === '#') {\n                        entropy = entropy.slice(1);\n                    }\n                    type = entropy[0];\n                    entropy = entropy.slice(1);\n                    if (!(type === 'd')) return [3 /*break*/, 1];\n                    privateKey = ethereumjs_util_1.sha256(ethereumjs_util_1.toBuffer(entropy));\n                    return [3 /*break*/, 4];\n                case 1:\n                    if (!(type === 'q')) return [3 /*break*/, 3];\n                    if (typeof password !== 'string') {\n                        throw new Error('Password required');\n                    }\n                    encryptedSeed = ethereumjs_util_1.sha256(Buffer.from(entropy.slice(0, 30)));\n                    checksum = entropy.slice(30, 46);\n                    salt = kryptoKitBrokenScryptSeed(encryptedSeed);\n                    return [4 /*yield*/, scrypt_js_1.scrypt(Buffer.from(password, 'utf8'), salt, 16384, 8, 1, 32)\n                        /* FIXME: try to use `crypto` instead of `aesjs`\n                    \n                        // NOTE: ECB doesn't use the IV, so it can be anything\n                        var decipher = crypto.createDecipheriv(\"aes-256-ecb\", aesKey, Buffer.from(0))\n                    \n                        // FIXME: this is a clear abuse, but seems to match how ECB in aesjs works\n                        privKey = Buffer.concat([\n                          decipher.update(encryptedSeed).slice(0, 16),\n                          decipher.update(encryptedSeed).slice(0, 16),\n                        ])\n                        */\n                    ];\n                case 2:\n                    aesKey = _a.sent();\n                    decipher = new aesjs.ModeOfOperation.ecb(aesKey);\n                    /* decrypt returns an Uint8Array, perhaps there is a better way to concatenate */\n                    privateKey = Buffer.concat([\n                        Buffer.from(decipher.decrypt(encryptedSeed.slice(0, 16))),\n                        Buffer.from(decipher.decrypt(encryptedSeed.slice(16, 32))),\n                    ]);\n                    if (checksum.length > 0) {\n                        if (checksum !==\n                            ethereumjs_util_1.sha256(ethereumjs_util_1.sha256(privateKey))\n                                .slice(0, 8)\n                                .toString('hex')) {\n                            throw new Error('Failed to decrypt input - possibly invalid passphrase');\n                        }\n                    }\n                    return [3 /*break*/, 4];\n                case 3: throw new Error('Unsupported or invalid entropy type');\n                case 4: return [2 /*return*/, new index_1.default(privateKey)];\n            }\n        });\n    });\n}\nexports.fromKryptoKit = fromKryptoKit;\n/**\n * Third Party API: Import a brain wallet used by Quorum Wallet\n */\nfunction fromQuorumWallet(passphrase, userid) {\n    if (passphrase.length < 10) {\n        throw new Error('Passphrase must be at least 10 characters');\n    }\n    if (userid.length < 10) {\n        throw new Error('User id must be at least 10 characters');\n    }\n    var merged = passphrase + userid;\n    var seed = crypto.pbkdf2Sync(merged, merged, 2000, 32, 'sha256');\n    return new index_1.default(seed);\n}\nexports.fromQuorumWallet = fromQuorumWallet;\nvar Thirdparty = {\n    fromEtherWallet: fromEtherWallet,\n    fromEtherCamp: fromEtherCamp,\n    fromKryptoKit: fromKryptoKit,\n    fromQuorumWallet: fromQuorumWallet,\n};\nexports.default = Thirdparty;\n//# sourceMappingURL=thirdparty.js.map"]},"metadata":{},"sourceType":"script"}