{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar index_1 = require(\"./index\");\n\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\n\nvar EthereumHDKey =\n/** @class */\nfunction () {\n  function EthereumHDKey(_hdkey) {\n    this._hdkey = _hdkey;\n  }\n  /**\n   * Creates an instance based on a seed.\n   *\n   * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n   * create one from a BIP39 mnemonic.\n   */\n\n\n  EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n  };\n  /**\n   * Create an instance based on a BIP32 extended private or public key.\n   */\n\n\n  EthereumHDKey.fromExtendedKey = function (base58Key) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n  };\n  /**\n   * Returns a BIP32 extended private key (xprv)\n   */\n\n\n  EthereumHDKey.prototype.privateExtendedKey = function () {\n    if (!this._hdkey.privateExtendedKey) {\n      throw new Error('This is a public key only wallet');\n    }\n\n    return this._hdkey.privateExtendedKey;\n  };\n  /**\n   * Return a BIP32 extended public key (xpub)\n   */\n\n\n  EthereumHDKey.prototype.publicExtendedKey = function () {\n    return this._hdkey.publicExtendedKey;\n  };\n  /**\n   * Derives a node based on a path (e.g. m/44'/0'/0/1)\n   */\n\n\n  EthereumHDKey.prototype.derivePath = function (path) {\n    return new EthereumHDKey(this._hdkey.derive(path));\n  };\n  /**\n   * Derive a node based on a child index\n   */\n\n\n  EthereumHDKey.prototype.deriveChild = function (index) {\n    return new EthereumHDKey(this._hdkey.deriveChild(index));\n  };\n  /**\n   * Return a `Wallet` instance as seen above\n   */\n\n\n  EthereumHDKey.prototype.getWallet = function () {\n    if (this._hdkey._privateKey) {\n      return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n    }\n\n    return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n  };\n\n  return EthereumHDKey;\n}();\n\nexports.default = EthereumHDKey;","map":{"version":3,"sources":["../src/hdkey.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,IAAA,aAAA;AAAA;AAAA,YAAA;AAkBE,WAAA,aAAA,CAA6B,MAA7B,EAAyC;AAAZ,SAAA,MAAA,GAAA,MAAA;AAAgB;AAjB7C;;;;;AAKG;;;AACW,EAAA,aAAA,CAAA,cAAA,GAAd,UAA6B,UAA7B,EAA+C;AAC7C,WAAO,IAAI,aAAJ,CAAkB,OAAA,CAAA,KAAA,CAAM,cAAN,CAAqB,UAArB,CAAlB,CAAP;AACD,GAFa;AAId;;AAEG;;;AACW,EAAA,aAAA,CAAA,eAAA,GAAd,UAA8B,SAA9B,EAA+C;AAC7C,WAAO,IAAI,aAAJ,CAAkB,OAAA,CAAA,KAAA,CAAM,eAAN,CAAsB,SAAtB,CAAlB,CAAP;AACD,GAFa;AAMd;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;AACE,QAAI,CAAC,KAAK,MAAL,CAAY,kBAAjB,EAAqC;AACnC,YAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,WAAO,KAAK,MAAL,CAAY,kBAAnB;AACD,GALM;AAOP;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,KAAK,MAAL,CAAY,iBAAnB;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA8B;AAC5B,WAAO,IAAI,aAAJ,CAAkB,KAAK,MAAL,CAAY,MAAZ,CAAmB,IAAnB,CAAlB,CAAP;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,KAAnB,EAAgC;AAC9B,WAAO,IAAI,aAAJ,CAAkB,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB,CAAlB,CAAP;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,QAAI,KAAK,MAAL,CAAY,WAAhB,EAA6B;AAC3B,aAAO,OAAA,CAAA,OAAA,CAAO,cAAP,CAAsB,KAAK,MAAL,CAAY,WAAlC,CAAP;AACD;;AACD,WAAO,OAAA,CAAA,OAAA,CAAO,aAAP,CAAqB,KAAK,MAAL,CAAY,UAAjC,EAA6C,IAA7C,CAAP;AACD,GALM;;AAMT,SAAA,aAAA;AAAC,CA5DD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\nvar EthereumHDKey = /** @class */ (function () {\n    function EthereumHDKey(_hdkey) {\n        this._hdkey = _hdkey;\n    }\n    /**\n     * Creates an instance based on a seed.\n     *\n     * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n     * create one from a BIP39 mnemonic.\n     */\n    EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n        return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n    };\n    /**\n     * Create an instance based on a BIP32 extended private or public key.\n     */\n    EthereumHDKey.fromExtendedKey = function (base58Key) {\n        return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n    };\n    /**\n     * Returns a BIP32 extended private key (xprv)\n     */\n    EthereumHDKey.prototype.privateExtendedKey = function () {\n        if (!this._hdkey.privateExtendedKey) {\n            throw new Error('This is a public key only wallet');\n        }\n        return this._hdkey.privateExtendedKey;\n    };\n    /**\n     * Return a BIP32 extended public key (xpub)\n     */\n    EthereumHDKey.prototype.publicExtendedKey = function () {\n        return this._hdkey.publicExtendedKey;\n    };\n    /**\n     * Derives a node based on a path (e.g. m/44'/0'/0/1)\n     */\n    EthereumHDKey.prototype.derivePath = function (path) {\n        return new EthereumHDKey(this._hdkey.derive(path));\n    };\n    /**\n     * Derive a node based on a child index\n     */\n    EthereumHDKey.prototype.deriveChild = function (index) {\n        return new EthereumHDKey(this._hdkey.deriveChild(index));\n    };\n    /**\n     * Return a `Wallet` instance as seen above\n     */\n    EthereumHDKey.prototype.getWallet = function () {\n        if (this._hdkey._privateKey) {\n            return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n        }\n        return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n    };\n    return EthereumHDKey;\n}());\nexports.default = EthereumHDKey;\n//# sourceMappingURL=hdkey.js.map"]},"metadata":{},"sourceType":"script"}