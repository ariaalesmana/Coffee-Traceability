{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/blockchain_project/src/components/Grosir/Produk/DaftarProduk.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, useEffect } from \"react\";\nimport showResults from \"../../showResults/showResults\";\nimport DaftarProdukForm from \"./DaftarProdukForm\";\nimport UserService from \"../../../services/user.service\";\nimport Web3 from \"web3\";\nimport { AddProduct } from \"../../../abi/abi\";\nimport QRcode from \"qrcode.react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nconst HDWalletProvider = require(\"@truffle/hdwallet-provider\");\n\nconst DaftarProduk = props => {\n  _s();\n\n  const provider = new HDWalletProvider(process.env.REACT_APP_MNEMONIC, \"https://ropsten.infura.io/v3/\" + process.env.REACT_APP_INFURA_PROJECT_ID);\n  const web3 = new Web3(provider);\n  provider.engine.stop();\n  const contractAddress = \"0xEb8eF83cB027D9d3594b77eCd05051E138741e5B\";\n  const code = props.code;\n  const [files, imageFile] = useState(\"\");\n  const [filesGambar, imageFileGambar] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [currencyID, setCurrencyID] = useState([]);\n\n  const onFileChange = file => {\n    imageFile(file);\n  };\n\n  const onFileChangeGambar = file => {\n    imageFileGambar(file);\n  };\n\n  const getWallet = async () => {\n    web3.eth.getAccounts(function (err, accounts) {\n      if (err != null) {\n        alert(\"An error occurred: \" + err);\n      } else if (accounts.length == 0) {\n        alert(\"User is not logged in to MetaMask\");\n      } else {\n        setAccount(accounts[0]);\n      }\n    });\n  };\n\n  useEffect(() => {\n    getWallet();\n    getDefaultCurrency();\n  }, []);\n\n  const getDefaultCurrency = () => {\n    UserService.getAddDetailProduct().then(response => {\n      response.data.currencies.map(value => {\n        if (value.code == response.data.defaultCurrencies) {\n          setCurrencyID(value.id);\n        }\n      });\n    });\n  };\n\n  const [qr, setQr] = useState(\"test\");\n\n  const handleChange = value => {\n    setQr(value);\n  };\n\n  const downloadQR = product_id => {\n    const canvas = document.getElementById(\"myqr\");\n    const pngUrl = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.href = pngUrl;\n    downloadLink.download = \"\" + product_id + \".png\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  const handleSubmit = values => {\n    const formData = new FormData();\n\n    if (values.roastingMenu && values.batch_id && values.name && values.productGroup && values.category && values.subcategory && values.description && values.short_description && values.price && values.unit && values.stock && values.sku && values.weight && values.tgl_produksi && files != \"\" && filesGambar != \"\") {\n      if (values.roastingMenu == \"Single\") {\n        formData.append(\"batch_id\", values.batch_id);\n      }\n\n      if (values.roastingMenu == \"Blended\") {\n        formData.append(\"beans\", JSON.stringify(values.beans));\n      }\n\n      formData.append(\"name\", values.name);\n      formData.append(\"product_group\", values.productGroup);\n      formData.append(\"category\", values.category);\n      formData.append(\"subcategory\", values.subcategory);\n      formData.append(\"description\", values.description);\n      formData.append(\"short_description\", values.short_description);\n      formData.append(\"price\", values.price);\n\n      if (values.currency == undefined) {\n        formData.append(\"currency\", currencyID);\n      } else {\n        formData.append(\"currency\", values.currency);\n      }\n\n      formData.append(\"unit\", values.unit);\n      formData.append(\"stock\", values.stock);\n      formData.append(\"sku\", values.sku); // formData.append(\"vendor_sku\", values.vendor_sku);\n\n      formData.append(\"weight\", values.weight);\n      formData.append(\"tgl_produksi\", values.tgl_produksi);\n\n      for (let i = 0; i < files.length; i++) {\n        formData.append(\"files[]\", files[i]);\n      }\n\n      formData.append(\"files_gambar\", filesGambar);\n      formData.append(\"fileName_gambar\", filesGambar.name);\n      UserService.addProduct(formData).then(async response => {\n        const product_id = response.data.product.id; // const linkQRCode = \"http://127.0.0.1:3000/detailProduk/\" + product_id;\n\n        const linkQRCode = process.env.REACT_APP_PROD_URL + \"detailProduk/\" + code + \"/\" + product_id;\n        await handleChange(linkQRCode);\n        const canvas = document.getElementById(\"myqr\");\n        let imageBlob = await new Promise(resolve => canvas.toBlob(resolve, \"image/png\"));\n        let formDataQR = new FormData();\n        formDataQR.append(\"files_qr\", imageBlob, \"\" + product_id + \".png\");\n        formDataQR.append(\"fileName_qr\", \"\" + product_id + \".png\");\n        downloadQR(product_id);\n        UserService.pushQRCodeImage(product_id, formDataQR); // //Blockchain Function\n        // if (values.roastingMenu == \"Single\") {\n        //   const storageContract = new web3.eth.Contract(\n        //     AddProduct,\n        //     contractAddress\n        //   );\n        //   const gas = await storageContract.methods\n        //     .addProducts(\n        //       response.data.product.id,\n        //       response.data.batch.id,\n        //       response.data.batch.biji_id,\n        //       response.data.batch.jenis_id,\n        //       response.data.batch.proses_id,\n        //       response.data.batch.supplier_id,\n        //       response.data.batch.volume,\n        //       response.data.batch.tgl_panen,\n        //       response.data.product.tgl_produksi,\n        //       \"\" + product_id,\n        //     )\n        //     .estimateGas();\n        //   var post = await storageContract.methods\n        //     .addProducts(\n        //       response.data.product.id,\n        //       response.data.batch.id,\n        //       response.data.batch.biji_id,\n        //       response.data.batch.jenis_id,\n        //       response.data.batch.proses_id,\n        //       response.data.batch.supplier_id,\n        //       response.data.batch.volume,\n        //       response.data.batch.tgl_panen,\n        //       response.data.product.tgl_produksi,\n        //       \"\" + product_id\n        //     )\n        //     .send(\n        //       {\n        //         from: account,\n        //         gas,\n        //       },\n        //       (error, transactionHash) => {\n        //         const formData = new FormData();\n        //         formData.append(\"product_id\", product_id);\n        //         formData.append(\"t_hash\", transactionHash);\n        //         UserService.addTransactionHash(formData);\n        //         console.log(transactionHash);\n        //       }\n        //     );\n        //   console.log(post);\n        // }\n        // if (values.roastingMenu == \"Blended\") {\n        //   for (let i = 0; i < response.data.blendedBeans.length; i++) {\n        //     console.log(response.data.blendedBeans[i].batch_id);\n        //     UserService.getDetailBatch(\n        //       response.data.blendedBeans[i].batch_id\n        //     ).then(async (response2) => {\n        //       const storageContract = new web3.eth.Contract(\n        //         AddProduct,\n        //         contractAddress\n        //       );\n        //       const gas = await storageContract.methods\n        //         .addProducts(\n        //           response.data.product.id,\n        //           response2.data.batch.id,\n        //           response2.data.batch.biji_id,\n        //           response2.data.batch.jenis_id,\n        //           response2.data.batch.proses_id,\n        //           response2.data.batch.supplier_id,\n        //           response2.data.batch.volume,\n        //           response2.data.batch.tgl_panen,\n        //           response.data.product.tgl_produksi,\n        //           \"\" + product_id\n        //         )\n        //         .estimateGas();\n        //       var post = await storageContract.methods\n        //         .addProducts(\n        //           response.data.product.id,\n        //           response2.data.batch.id,\n        //           response2.data.batch.biji_id,\n        //           response2.data.batch.jenis_id,\n        //           response2.data.batch.proses_id,\n        //           response2.data.batch.supplier_id,\n        //           response2.data.batch.volume,\n        //           response2.data.batch.tgl_panen,\n        //           response.data.product.tgl_produksi,\n        //           \"\" + product_id\n        //         )\n        //         .send(\n        //           {\n        //             from: account,\n        //             gas,\n        //           },\n        //           (error, transactionHash) => {\n        //             console.log(transactionHash);\n        //           }\n        //         );\n        //       console.log(post);\n        //     });\n        //   }\n        // }\n\n        showResults(\"Data has been added\");\n      });\n    } else {\n      showResults(\"Please fill all the fields\");\n    }\n  }; // document.getElementById(\"CDropdownItemNewAccount\").style.display = \"block\";\n  // const web3Context = useWeb3(`wss://ropsten.infura.io/ws/v3/${infuraProjectId}`);\n  // const { networkId, networkName, accounts, providerName, lib } = web3Context;\n  // const requestAuth = async web3Context => {\n  // \ttry {\n  // \t\tawait web3Context.requestAuth();\n  // \t} catch (e) {\n  // \t\tconsole.error(e);\n  // \t}\n  // };\n  // const requestAccess = useCallback(() => requestAuth(web3Context), []);\n  // const getBalance = useCallback(async () => {\n  //   let balance = accounts && accounts.length > 0 ? lib.utils.fromWei(await lib.eth.getBalance(accounts[0]), 'ether') : 'Unknown';\n  //   setBalance(balance);\n  // }, [accounts, lib.eth, lib.utils]);\n  // if(accounts && accounts.length) {\n  //   document.getElementById(\"CDropdownItemNewAccount\").innerHTML = 'Address<br>'+accounts[0] + '<br>Your ETH balance: <br>'+balance;\n  // } else {\n  //   document.getElementById('CDropdownItemNewAccount').onclick = function(){\n  //     requestAccess();\n  //   }\n  // }\n  // useEffect(() => {\n  //   getBalance();\n  // }, [accounts, getBalance, networkId]);\n\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DaftarProdukForm, {\n      onSubmit: handleSubmit,\n      onSelectImage: onFileChange,\n      onSelectImageGambar: onFileChangeGambar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        visibility: \"hidden\"\n      },\n      children: qr ? /*#__PURE__*/_jsxDEV(QRcode, {\n        id: \"myqr\",\n        value: qr,\n        size: 320,\n        includeMargin: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No QR code preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DaftarProduk, \"yMMYtTW0vRTsi1LmHytYc931Gqc=\");\n\n_c = DaftarProduk;\nexport default DaftarProduk;\n\nvar _c;\n\n$RefreshReg$(_c, \"DaftarProduk\");","map":{"version":3,"sources":["/Applications/MAMP/htdocs/blockchain_project/src/components/Grosir/Produk/DaftarProduk.js"],"names":["Fragment","useState","useEffect","showResults","DaftarProdukForm","UserService","Web3","AddProduct","QRcode","require","config","HDWalletProvider","DaftarProduk","props","provider","process","env","REACT_APP_MNEMONIC","REACT_APP_INFURA_PROJECT_ID","web3","engine","stop","contractAddress","code","files","imageFile","filesGambar","imageFileGambar","balance","setBalance","account","setAccount","currencyID","setCurrencyID","onFileChange","file","onFileChangeGambar","getWallet","eth","getAccounts","err","accounts","alert","length","getDefaultCurrency","getAddDetailProduct","then","response","data","currencies","map","value","defaultCurrencies","id","qr","setQr","handleChange","downloadQR","product_id","canvas","document","getElementById","pngUrl","toDataURL","replace","downloadLink","createElement","href","download","body","appendChild","click","removeChild","handleSubmit","values","formData","FormData","roastingMenu","batch_id","name","productGroup","category","subcategory","description","short_description","price","unit","stock","sku","weight","tgl_produksi","append","JSON","stringify","beans","currency","undefined","i","addProduct","product","linkQRCode","REACT_APP_PROD_URL","imageBlob","Promise","resolve","toBlob","formDataQR","pushQRCodeImage","visibility"],"mappings":"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","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport showResults from \"../../showResults/showResults\";\nimport DaftarProdukForm from \"./DaftarProdukForm\";\nimport UserService from \"../../../services/user.service\";\nimport Web3 from \"web3\";\nimport { AddProduct } from \"../../../abi/abi\";\n\nimport QRcode from \"qrcode.react\";\n\nrequire(\"dotenv\").config();\n\nconst HDWalletProvider = require(\"@truffle/hdwallet-provider\");\n\nconst DaftarProduk = (props) => {\n  const provider = new HDWalletProvider(\n    process.env.REACT_APP_MNEMONIC,\n    \"https://ropsten.infura.io/v3/\" + process.env.REACT_APP_INFURA_PROJECT_ID\n  );\n  const web3 = new Web3(provider);\n  provider.engine.stop();\n  \n  const contractAddress = \"0xEb8eF83cB027D9d3594b77eCd05051E138741e5B\";\n\n  const code = props.code;\n\n  const [files, imageFile] = useState(\"\");\n  const [filesGambar, imageFileGambar] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const [account, setAccount] = useState(\"\");\n\n  const [currencyID, setCurrencyID] = useState([]);\n\n  const onFileChange = (file) => {\n    imageFile(file);\n  };\n\n  const onFileChangeGambar = (file) => {\n    imageFileGambar(file);\n  };\n\n  const getWallet = async () => {\n    web3.eth.getAccounts(function (err, accounts) {\n      if (err != null) {\n        alert(\"An error occurred: \" + err);\n      } else if (accounts.length == 0) {\n        alert(\"User is not logged in to MetaMask\");\n      } else {\n        setAccount(accounts[0]);\n      }\n    });\n  };\n\n  useEffect(() => {\n    getWallet();\n    getDefaultCurrency();\n  }, []);\n\n  const getDefaultCurrency = () => {\n    UserService.getAddDetailProduct().then((response) => {\n      response.data.currencies.map((value) => {\n        if (value.code == response.data.defaultCurrencies) {\n          setCurrencyID(value.id);\n        }\n      });\n    });\n  };\n\n  const [qr, setQr] = useState(\"test\");\n  const handleChange = (value) => {\n    setQr(value);\n  };\n\n  const downloadQR = (product_id) => {\n    const canvas = document.getElementById(\"myqr\");\n    const pngUrl = canvas\n      .toDataURL(\"image/png\")\n      .replace(\"image/png\", \"image/octet-stream\");\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.href = pngUrl;\n    downloadLink.download = \"\" + product_id + \".png\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  const handleSubmit = (values) => {\n    const formData = new FormData();\n\n    if (\n      values.roastingMenu &&\n      values.batch_id &&\n      values.name &&\n      values.productGroup &&\n      values.category &&\n      values.subcategory &&\n      values.description &&\n      values.short_description &&\n      values.price &&\n      values.unit &&\n      values.stock &&\n      values.sku &&\n      values.weight &&\n      values.tgl_produksi &&\n      files != \"\" &&\n      filesGambar != \"\"\n    ) {\n      if (values.roastingMenu == \"Single\") {\n        formData.append(\"batch_id\", values.batch_id);\n      }\n\n      if (values.roastingMenu == \"Blended\") {\n        formData.append(\"beans\", JSON.stringify(values.beans));\n      }\n\n      formData.append(\"name\", values.name);\n      formData.append(\"product_group\", values.productGroup);\n      formData.append(\"category\", values.category);\n      formData.append(\"subcategory\", values.subcategory);\n      formData.append(\"description\", values.description);\n      formData.append(\"short_description\", values.short_description);\n      formData.append(\"price\", values.price);\n\n      if (values.currency == undefined) {\n        formData.append(\"currency\", currencyID);\n      } else {\n        formData.append(\"currency\", values.currency);\n      }\n\n      formData.append(\"unit\", values.unit);\n      formData.append(\"stock\", values.stock);\n      formData.append(\"sku\", values.sku);\n      // formData.append(\"vendor_sku\", values.vendor_sku);\n      formData.append(\"weight\", values.weight);\n      formData.append(\"tgl_produksi\", values.tgl_produksi);\n\n      for (let i = 0; i < files.length; i++) {\n        formData.append(\"files[]\", files[i]);\n      }\n\n      formData.append(\"files_gambar\", filesGambar);\n      formData.append(\"fileName_gambar\", filesGambar.name);\n\n      UserService.addProduct(formData).then(async (response) => {\n        const product_id = response.data.product.id;\n        // const linkQRCode = \"http://127.0.0.1:3000/detailProduk/\" + product_id;\n        const linkQRCode =\n          process.env.REACT_APP_PROD_URL +\n          \"detailProduk/\" +\n          code +\n          \"/\" +\n          product_id;\n        await handleChange(linkQRCode);\n\n        const canvas = document.getElementById(\"myqr\");\n        let imageBlob = await new Promise((resolve) =>\n          canvas.toBlob(resolve, \"image/png\")\n        );\n\n        let formDataQR = new FormData();\n        formDataQR.append(\"files_qr\", imageBlob, \"\" + product_id + \".png\");\n        formDataQR.append(\"fileName_qr\", \"\" + product_id + \".png\");\n\n        downloadQR(product_id);\n\n        UserService.pushQRCodeImage(product_id, formDataQR);\n\n        // //Blockchain Function\n        // if (values.roastingMenu == \"Single\") {\n        //   const storageContract = new web3.eth.Contract(\n        //     AddProduct,\n        //     contractAddress\n        //   );\n        //   const gas = await storageContract.methods\n        //     .addProducts(\n        //       response.data.product.id,\n        //       response.data.batch.id,\n        //       response.data.batch.biji_id,\n        //       response.data.batch.jenis_id,\n        //       response.data.batch.proses_id,\n        //       response.data.batch.supplier_id,\n        //       response.data.batch.volume,\n        //       response.data.batch.tgl_panen,\n        //       response.data.product.tgl_produksi,\n        //       \"\" + product_id,\n        //     )\n        //     .estimateGas();\n        //   var post = await storageContract.methods\n        //     .addProducts(\n        //       response.data.product.id,\n        //       response.data.batch.id,\n        //       response.data.batch.biji_id,\n        //       response.data.batch.jenis_id,\n        //       response.data.batch.proses_id,\n        //       response.data.batch.supplier_id,\n        //       response.data.batch.volume,\n        //       response.data.batch.tgl_panen,\n        //       response.data.product.tgl_produksi,\n        //       \"\" + product_id\n        //     )\n        //     .send(\n        //       {\n        //         from: account,\n        //         gas,\n        //       },\n        //       (error, transactionHash) => {\n        //         const formData = new FormData();\n        //         formData.append(\"product_id\", product_id);\n        //         formData.append(\"t_hash\", transactionHash);\n\n        //         UserService.addTransactionHash(formData);\n        //         console.log(transactionHash);\n        //       }\n        //     );\n        //   console.log(post);\n        // }\n\n        // if (values.roastingMenu == \"Blended\") {\n        //   for (let i = 0; i < response.data.blendedBeans.length; i++) {\n        //     console.log(response.data.blendedBeans[i].batch_id);\n        //     UserService.getDetailBatch(\n        //       response.data.blendedBeans[i].batch_id\n        //     ).then(async (response2) => {\n        //       const storageContract = new web3.eth.Contract(\n        //         AddProduct,\n        //         contractAddress\n        //       );\n        //       const gas = await storageContract.methods\n        //         .addProducts(\n        //           response.data.product.id,\n        //           response2.data.batch.id,\n        //           response2.data.batch.biji_id,\n        //           response2.data.batch.jenis_id,\n        //           response2.data.batch.proses_id,\n        //           response2.data.batch.supplier_id,\n        //           response2.data.batch.volume,\n        //           response2.data.batch.tgl_panen,\n        //           response.data.product.tgl_produksi,\n        //           \"\" + product_id\n        //         )\n        //         .estimateGas();\n        //       var post = await storageContract.methods\n        //         .addProducts(\n        //           response.data.product.id,\n        //           response2.data.batch.id,\n        //           response2.data.batch.biji_id,\n        //           response2.data.batch.jenis_id,\n        //           response2.data.batch.proses_id,\n        //           response2.data.batch.supplier_id,\n        //           response2.data.batch.volume,\n        //           response2.data.batch.tgl_panen,\n        //           response.data.product.tgl_produksi,\n        //           \"\" + product_id\n        //         )\n        //         .send(\n        //           {\n        //             from: account,\n        //             gas,\n        //           },\n        //           (error, transactionHash) => {\n        //             console.log(transactionHash);\n        //           }\n        //         );\n        //       console.log(post);\n        //     });\n        //   }\n        // }\n\n        showResults(\"Data has been added\");\n      });\n    } else {\n      showResults(\"Please fill all the fields\");\n    }\n  };\n\n  // document.getElementById(\"CDropdownItemNewAccount\").style.display = \"block\";\n\n  // const web3Context = useWeb3(`wss://ropsten.infura.io/ws/v3/${infuraProjectId}`);\n  // const { networkId, networkName, accounts, providerName, lib } = web3Context;\n  // const requestAuth = async web3Context => {\n  // \ttry {\n  // \t\tawait web3Context.requestAuth();\n  // \t} catch (e) {\n  // \t\tconsole.error(e);\n  // \t}\n  // };\n  // const requestAccess = useCallback(() => requestAuth(web3Context), []);\n\n  // const getBalance = useCallback(async () => {\n  //   let balance = accounts && accounts.length > 0 ? lib.utils.fromWei(await lib.eth.getBalance(accounts[0]), 'ether') : 'Unknown';\n  //   setBalance(balance);\n  // }, [accounts, lib.eth, lib.utils]);\n\n  // if(accounts && accounts.length) {\n  //   document.getElementById(\"CDropdownItemNewAccount\").innerHTML = 'Address<br>'+accounts[0] + '<br>Your ETH balance: <br>'+balance;\n  // } else {\n  //   document.getElementById('CDropdownItemNewAccount').onclick = function(){\n  //     requestAccess();\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   getBalance();\n  // }, [accounts, getBalance, networkId]);\n\n  return (\n    <Fragment>\n      <DaftarProdukForm\n        onSubmit={handleSubmit}\n        onSelectImage={onFileChange}\n        onSelectImageGambar={onFileChangeGambar}\n      />\n      <div style={{ visibility: \"hidden\" }}>\n        {qr ? (\n          <QRcode id=\"myqr\" value={qr} size={320} includeMargin={true} />\n        ) : (\n          <p>No QR code preview</p>\n        )}\n      </div>\n    </Fragment>\n  );\n};\nexport default DaftarProduk;\n"]},"metadata":{},"sourceType":"module"}