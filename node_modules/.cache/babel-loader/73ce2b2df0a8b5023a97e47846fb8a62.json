{"ast":null,"code":"const libheif = require('libheif-js');\n\nconst uint8ArrayUtf8ByteString = (array, start, end) => {\n  return String.fromCharCode(...array.slice(start, end));\n}; // brands explained: https://github.com/strukturag/libheif/issues/83\n// code adapted from: https://github.com/sindresorhus/file-type/blob/6f901bd82b849a85ca4ddba9c9a4baacece63d31/core.js#L428-L438\n\n\nconst isHeic = buffer => {\n  const brandMajor = uint8ArrayUtf8ByteString(buffer, 8, 12).replace('\\0', ' ').trim();\n\n  switch (brandMajor) {\n    case 'mif1':\n      return true;\n    // {ext: 'heic', mime: 'image/heif'};\n\n    case 'msf1':\n      return true;\n    // {ext: 'heic', mime: 'image/heif-sequence'};\n\n    case 'heic':\n    case 'heix':\n      return true;\n    // {ext: 'heic', mime: 'image/heic'};\n\n    case 'hevc':\n    case 'hevx':\n      return true;\n    // {ext: 'heic', mime: 'image/heic-sequence'};\n  }\n\n  return false;\n};\n\nconst decodeImage = async image => {\n  const width = image.get_width();\n  const height = image.get_height();\n  const arrayBuffer = await new Promise((resolve, reject) => {\n    image.display({\n      data: new Uint8ClampedArray(width * height * 4),\n      width,\n      height\n    }, displayData => {\n      if (!displayData) {\n        return reject(new Error('HEIF processing error'));\n      } // get the ArrayBuffer from the Uint8Array\n\n\n      resolve(displayData.data.buffer);\n    });\n  });\n  return {\n    width,\n    height,\n    data: arrayBuffer\n  };\n};\n\nconst decodeBuffer = async _ref => {\n  let {\n    buffer,\n    all\n  } = _ref;\n\n  if (!isHeic(buffer)) {\n    throw new TypeError('input buffer is not a HEIC image');\n  }\n\n  const decoder = new libheif.HeifDecoder();\n  const data = decoder.decode(buffer);\n\n  if (!data.length) {\n    throw new Error('HEIF image not found');\n  }\n\n  if (!all) {\n    return await decodeImage(data[0]);\n  }\n\n  return data.map(image => {\n    return {\n      decode: async () => await decodeImage(image)\n    };\n  });\n};\n\nmodule.exports = async _ref2 => {\n  let {\n    buffer\n  } = _ref2;\n  return await decodeBuffer({\n    buffer,\n    all: false\n  });\n};\n\nmodule.exports.all = async _ref3 => {\n  let {\n    buffer\n  } = _ref3;\n  return await decodeBuffer({\n    buffer,\n    all: true\n  });\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/blockchain_project/node_modules/heic-decode/index.js"],"names":["libheif","require","uint8ArrayUtf8ByteString","array","start","end","String","fromCharCode","slice","isHeic","buffer","brandMajor","replace","trim","decodeImage","image","width","get_width","height","get_height","arrayBuffer","Promise","resolve","reject","display","data","Uint8ClampedArray","displayData","Error","decodeBuffer","all","TypeError","decoder","HeifDecoder","decode","length","map","module","exports"],"mappings":"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","sourcesContent":["const libheif = require('libheif-js');\n\nconst uint8ArrayUtf8ByteString = (array, start, end) => {\n  return String.fromCharCode(...array.slice(start, end));\n};\n\n// brands explained: https://github.com/strukturag/libheif/issues/83\n// code adapted from: https://github.com/sindresorhus/file-type/blob/6f901bd82b849a85ca4ddba9c9a4baacece63d31/core.js#L428-L438\nconst isHeic = (buffer) => {\n  const brandMajor = uint8ArrayUtf8ByteString(buffer, 8, 12).replace('\\0', ' ').trim();\n\n  switch (brandMajor) {\n    case 'mif1':\n      return true; // {ext: 'heic', mime: 'image/heif'};\n    case 'msf1':\n      return true; // {ext: 'heic', mime: 'image/heif-sequence'};\n    case 'heic':\n    case 'heix':\n      return true; // {ext: 'heic', mime: 'image/heic'};\n    case 'hevc':\n    case 'hevx':\n      return true; // {ext: 'heic', mime: 'image/heic-sequence'};\n  }\n\n  return false;\n};\n\nconst decodeImage = async (image) => {\n  const width = image.get_width();\n  const height = image.get_height();\n\n  const arrayBuffer = await new Promise((resolve, reject) => {\n    image.display({ data: new Uint8ClampedArray(width*height*4), width, height }, (displayData) => {\n      if (!displayData) {\n        return reject(new Error('HEIF processing error'));\n      }\n\n      // get the ArrayBuffer from the Uint8Array\n      resolve(displayData.data.buffer);\n    });\n  });\n\n  return { width, height, data: arrayBuffer };\n};\n\nconst decodeBuffer = async ({ buffer, all }) => {\n  if (!isHeic(buffer)) {\n    throw new TypeError('input buffer is not a HEIC image');\n  }\n\n  const decoder = new libheif.HeifDecoder();\n  const data = decoder.decode(buffer);\n\n  if (!data.length) {\n    throw new Error('HEIF image not found');\n  }\n\n  if (!all) {\n    return await decodeImage(data[0]);\n  }\n\n  return data.map(image => {\n    return {\n      decode: async () => await decodeImage(image)\n    };\n  });\n};\n\nmodule.exports = async ({ buffer }) => await decodeBuffer({ buffer, all: false });\nmodule.exports.all = async ({ buffer }) => await decodeBuffer({ buffer, all: true });\n"]},"metadata":{},"sourceType":"script"}