{"ast":null,"code":"const jpegJs = require('jpeg-js');\n\nconst {\n  PNG\n} = require('pngjs');\n\nconst decode = require('heic-decode');\n\nconst to = {\n  JPEG: _ref => {\n    let {\n      data,\n      width,\n      height,\n      quality\n    } = _ref;\n    return jpegJs.encode({\n      data,\n      width,\n      height\n    }, quality).data;\n  },\n  PNG: _ref2 => {\n    let {\n      data,\n      width,\n      height\n    } = _ref2;\n    const png = new PNG({\n      width,\n      height\n    });\n    png.data = data;\n    return PNG.sync.write(png, {\n      width: width,\n      height: height,\n      deflateLevel: 9,\n      deflateStrategy: 3,\n      filterType: -1,\n      colorType: 6,\n      inputHasAlpha: true\n    });\n  }\n};\n\nconst convertImage = async _ref3 => {\n  let {\n    image,\n    format,\n    quality\n  } = _ref3;\n  return await to[format]({\n    width: image.width,\n    height: image.height,\n    data: Buffer.from(image.data),\n    quality: Math.floor(quality * 100)\n  });\n};\n\nconst convert = async _ref4 => {\n  let {\n    buffer,\n    format,\n    quality,\n    all\n  } = _ref4;\n\n  if (!to[format]) {\n    throw new Error(`output format needs to be one of [${Object.keys(to)}]`);\n  }\n\n  if (!all) {\n    const image = await decode({\n      buffer\n    });\n    return await convertImage({\n      image,\n      format,\n      quality\n    });\n  }\n\n  const images = await decode.all({\n    buffer\n  });\n  return images.map(image => {\n    return {\n      convert: async () => await convertImage({\n        image: await image.decode(),\n        format,\n        quality\n      })\n    };\n  });\n};\n\nmodule.exports = async _ref5 => {\n  let {\n    buffer,\n    format,\n    quality = 0.92\n  } = _ref5;\n  return await convert({\n    buffer,\n    format,\n    quality,\n    all: false\n  });\n};\n\nmodule.exports.all = async _ref6 => {\n  let {\n    buffer,\n    format,\n    quality = 0.92\n  } = _ref6;\n  return await convert({\n    buffer,\n    format,\n    quality,\n    all: true\n  });\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/blockchain_project/node_modules/heic-convert/index.js"],"names":["jpegJs","require","PNG","decode","to","JPEG","data","width","height","quality","encode","png","sync","write","deflateLevel","deflateStrategy","filterType","colorType","inputHasAlpha","convertImage","image","format","Buffer","from","Math","floor","convert","buffer","all","Error","Object","keys","images","map","module","exports"],"mappings":"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","sourcesContent":["const jpegJs = require('jpeg-js');\nconst { PNG } = require('pngjs');\n\nconst decode = require('heic-decode');\n\nconst to = {\n  JPEG: ({ data, width, height, quality }) => jpegJs.encode({ data, width, height }, quality).data,\n  PNG: ({ data, width, height }) => {\n    const png = new PNG({ width, height });\n    png.data = data;\n\n    return PNG.sync.write(png, {\n      width: width,\n      height: height,\n      deflateLevel: 9,\n      deflateStrategy: 3,\n      filterType: -1,\n      colorType: 6,\n      inputHasAlpha: true\n    });\n  }\n};\n\nconst convertImage = async ({ image, format, quality }) => {\n  return await to[format]({\n    width: image.width,\n    height: image.height,\n    data: Buffer.from(image.data),\n    quality: Math.floor(quality * 100)\n  });\n};\n\nconst convert = async ({ buffer, format, quality, all }) => {\n  if (!to[format]) {\n    throw new Error(`output format needs to be one of [${Object.keys(to)}]`);\n  }\n\n  if (!all) {\n    const image = await decode({ buffer });\n    return await convertImage({ image, format, quality });\n  }\n\n  const images = await decode.all({ buffer });\n\n  return images.map(image => {\n    return {\n      convert: async () => await convertImage({\n        image: await image.decode(),\n        format,\n        quality\n      })\n    };\n  });\n};\n\nmodule.exports = async ({ buffer, format, quality = 0.92 }) => await convert({ buffer, format, quality, all: false });\nmodule.exports.all = async ({ buffer, format, quality = 0.92 }) => await convert({ buffer, format, quality, all: true });\n"]},"metadata":{},"sourceType":"script"}